name: RustDesk CI

env:
  # 明确 Rust 版本控制
  RUST_VERSION: "1.70.0"
  VCPKG_COMMIT_ID: "f7423ee180c4b7f40d43402c2feb3859161ef625"

on:
  workflow_dispatch:
  pull_request:  # [!code ++]
  push:  # [!code ++]
    branches: [ master ]

jobs:
  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          # 启用多平台构建
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04 }
          - { target: x86_64-pc-windows-msvc, os: windows-2022 }  # [!code ++]

    steps:
      # 1. 代码检出（已优化为 v4）
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 跨平台依赖安装
      - name: Install Prerequisites
        shell: bash
        run: |
          case "${{ matrix.job.target }}" in
            *linux*)
              sudo apt-get update -y
              sudo apt-get install -y clang cmake libgtk-3-dev nasm
              ;;
            *windows*)
              choco install llvm nasm -y  # [!code ++]
              ;;
          esac

      # 3. Rust 工具链安装（修复废弃配置）
      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustc, clippy

      # 4. 智能缓存加速
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # 5. 构建命令标准化
      - name: Build Release
        run: cargo build --release --target ${{ matrix.job.target }}

      # 6. 产物上传（跨平台兼容）
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: rustdesk-${{ matrix.job.target }}
          path: |
            target/${{ matrix.job.target }}/release/*.exe
            target/${{ matrix.job.target }}/release/*.dll
